BroadcastReceiver 广播
1.作用：监听 / 接收 应用 App 发出的广播消息，并 做出响应；
2. 自定义广播接收者BroadcastReceiver
  2.1：继承BroadcastReceivre基类；
  2.2：必须复写抽象方法onReceive()方法
      2.2.1：广播接收器接收到相应广播后，会自动回调 onReceive() 方法
      2.2.2：一般情况下，onReceive方法会涉及 与 其他组件之间的交互，如发送Notification、启动Service等
      2.2.3：默认情况下，广播接收器运行在 UI 线程，因此，onReceive()方法不能执行耗时操作，否则将导致ANR
  2.3：广播接收器注册 动态注册、静态注册
       2.3.1：静态注册：在AndroidManifest.xml里通过<receive>标签声明
              <receiver
                  android:enabled=["true" | "false"]
              //此broadcastReceiver能否接收其他App的发出的广播
              //默认值是由receiver中有无intent-filter决定的：如果有intent-filter，默认值为true，否则为false
                  android:exported=["true" | "false"]
                  android:icon="drawable resource"
                  android:label="string resource"
              //继承BroadcastReceiver子类的类名
                  android:name=".mBroadcastReceiver"
              //具有相应权限的广播发送者发送的广播才能被此BroadcastReceiver所接收；
                  android:permission="string"
              //BroadcastReceiver运行所处的进程
              //默认为app的进程，可以指定独立的进程
              //注：Android四大基本组件都可以通过此属性指定自己的独立进程
                  android:process="string" >

              //用于指定此广播接收器将接收的广播类型
              //本示例中给出的是用于接收网络状态改变时发出的广播
               <intent-filter>
              <action android:name="android.net.conn.CONNECTIVITY_CHANGE" />
                  </intent-filter>
              </receiver>
       2.3.2：动态注册：在代码中调用Context.registerReceiver（）方法
              // 选择在Activity生命周期方法中的onResume()中注册
              @Override
                protected void onResume(){
                    super.onResume();

                  // 1. 实例化BroadcastReceiver子类 &  IntentFilter
                   mBroadcastReceiver mBroadcastReceiver = new mBroadcastReceiver();
                   IntentFilter intentFilter = new IntentFilter();

                  // 2. 设置接收广播的类型
                  intentFilter.addAction(android.net.conn.CONNECTIVITY_CHANGE);

                  // 3. 动态注册：调用Context的registerReceiver（）方法
                   registerReceiver(mBroadcastReceiver, intentFilter);
               }


              // 注册广播后，要在相应位置记得销毁广播
              // 即在onPause() 中unregisterReceiver(mBroadcastReceiver)
              // 当此Activity实例化时，会动态将MyBroadcastReceiver注册到系统中
              // 当此Activity销毁时，动态注册的MyBroadcastReceiver将不再接收到相应的广播。
               @Override
               protected void onPause() {
                   super.onPause();
                    //销毁在onResume()方法中的广播
                   unregisterReceiver(mBroadcastReceiver);
                   }
              }
       注意：动态广播最好在Activity 的 onResume()注册、onPause()注销。
       原因：对于动态广播，有注册就必然得有注销，否则会导致内存泄露

            在onResume()注册、onPause()注销是因为onPause()在App死亡前一定会被执行，从而保证广播在App死亡前一定会被注销，
            从而防止内存泄露

            不在onCreate() & onDestory() 或 onStart() & onStop()注册、注销是因为：
            1.当系统因为内存不足（优先级更高的应用需要内存，请看上图红框）要回收Activity占用的资源时，
              Activity在执行完onPause()方法后就会被销毁，有些生命周期方法onStop()，onDestory()就不会执行。
              当再回到此Activity时，是从onCreate方法开始执行。
            2.假设我们将广播的注销放在onStop()，onDestory()方法里的话，有可能在Activity被销毁后还未执行onStop()，
              onDestory()方法，即广播仍还未注销，从而导致内存泄露。
            3.但是，onPause()一定会被执行，从而保证了广播在App死亡前一定会被注销，从而防止内存泄露。

  3.广播类型：
    3.1：普通广播（Normal Broadcast）
    3.2：系统广播（System Broadcast）
    3.3：有序广播（Ordered Broadcast）
    3.4：粘性广播（Sticky Broadcast）
    3.5：App应用内广播（Local Broadcast）



